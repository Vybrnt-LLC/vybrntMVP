def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// signingConfigs {
//     release {
//         keyAlias keystoreProperties['keyAlias']
//         keyPassword keystoreProperties['keyPassword']
//         storeFile file(keystoreProperties['storeFile'])
//         storePassword keystoreProperties['storePassword']
//     }
// }
// buildTypes {
//     release {
//         signingConfig signingConfigs.debug
//     }
// }

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        
        applicationId "com.vybrnt.vybrnt"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

     

    signingConfigs {
    release {
        // keyAlias keystoreProperties['keyAlias']
        // keyPassword keystoreProperties['keyPassword']
        // storeFile file(keystoreProperties['storeFile'])
        // storePassword keystoreProperties['storePassword']
    }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.debug
            //signingConfig signingConfigs.release
            // minifyEnabled true
            // useProguard true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'),
            //         'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "flavor-type"
    productFlavors {
        dev {
            dimension "flavor-type"
            applicationIdSuffix ".dev"
        }
        prod {
            dimension "flavor-type"
            applicationId "com.vybrnt.vybrnt"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-messaging:21.0.0'
    implementation "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava"
}
